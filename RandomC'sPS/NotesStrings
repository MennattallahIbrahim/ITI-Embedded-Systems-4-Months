/  *****************************************************************STRINGS*************************************************************** 
// to assign string: 
//                  char str[] = "Menna";
// to print string:                      
//                  printf("%s", str);
//the output in cmd:
//                  Menna
//but if we did this: 
//                 char str[] = "Menna";
//                 printf("%c", str);
//the output in cmd:
//                  non sense
//
//if we wrote:    
//           char a = 'a';
//           printf("%c", a);                  
//the output will be:
//           a
//note: to assign char you have to use '' not "" 
//if you used %s instead of %c it won't print anything on the cmd screen   
//if you wrote:
//            char a = 'aa';
//            printf("%c", a);
//the output will be:
//             error because this is a multi character not one
//
//The scanf() function reads the sequence of characters until it encounters whitespace (space, newline, tab, etc.).
//
//#include <stdio.h>
//int main()
// {
//    char name[20];
//    printf("Enter name: ");
//    scanf("%s", name);
//    printf("Your name is %s.", name);
//    return 0;
// }
////i entered "Dennis Ritchie"the output will be:
//             Dennis 
//
//Even though Dennis Ritchie was entered in the above program, only "Dennis" was stored in the name string. It's because there was a space after Dennis.
//
//Also notice that we have used the code name instead of &name with scanf().
//
//scanf("%s", name);
//This is because name is a char array, and we know that array names decay to pointers in C.
//
//Thus, the name in scanf() already points to the address of the first element in the string, which is why we don't need to use &.
//
//How to read a line of text?
//You can use the fgets() function to read a line of string. And, you can use puts() to display the string.
//#include <stdio.h>
//int main()
//{
//    char name[30];
//    printf("Enter name: ");
//    fgets(name, sizeof(name), stdin);  // read string
//    printf("Name: ");
//    puts(name);    // display string
//    return 0;
//}
//Output
//
//Enter name: Tom Hanks
//Name: Tom Hanks
//
//Here, we have used fgets() function to read a string from the user.
//
//fgets(name, sizeof(name), stdlin); // read string
//
//The sizeof(name) results to 30. Hence, we can take a maximum of 30 characters as input which is the size of the name string.
//
//To print the string, we have used puts(name);.
//
//Note: The gets() function can also be to take input from the user. However, it is removed from the C standard.
//
//It's because gets() allows you to input any length of characters. Hence, there might be a buffer overflow.//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/  *****************************************************************POINTERS************************************************************** 
// Equivalent to sum += x[i]
//      sum += *(x+i);


//   #include <stdio.h>
//   int main() {
// 
//   int x[5] = {1, 2, 3, 4, 5};
//   int* ptr;
// 
//   // ptr is assigned the address of the third element
//   ptr = &x[2]; 
// 
//   printf("*ptr = %d \n", *ptr);   // 3
//   printf("*(ptr+1) = %d \n", *(ptr+1)); // 4
//   printf("*(ptr-1) = %d", *(ptr-1));  // 2
// 
//   return 0;
//   }
// 
// 
// #include <stdio.h>

//  int main(void) {
//  char name[] = "Harry Potter";
//
//  printf("%c", *name);     // Output: H
//  printf("%c", *(name+1));   // Output: a
//  printf("%c", *(name+7));   // Output: o
//
//  char *namePtr;
//
//  namePtr = name;
//  printf("%c", *namePtr);     // Output: H
//  printf("%c", *(namePtr+1));   // Output: a
//  printf("%c", *(namePtr+7));   // Output: o
//}
// 
// 
//  #include <stdio.h>
//  void swap(int *n1, int *n2);
//  
//  int main()
//  {
//      int num1 = 5, num2 = 10;
//  
//      // address of num1 and num2 is passed
//      swap( &num1, &num2);
//  
//      printf("num1 = %d\n", num1);
//      printf("num2 = %d", num2);
//      return 0;
//  }
//  
//  void swap(int* n1, int* n2)
//  {
//      int temp;
//      temp = *n1;
//      *n1 = *n2;
//      *n2 = temp;
//  }
//When *n1 and *n2 are changed inside the swap() function, num1 and num2 inside the main() function are also changed.
//
//Inside the swap() function, *n1 and *n2 swapped. Hence, num1 and num2 are also swapped.
//
//Notice that swap() is not returning anything; its return type is void.
//
//
//  #include <stdio.h>
//  
//  void addOne(int* ptr) {
//    (*ptr)++; // adding 1 to *ptr
//  }
//  
//  int main()
//  {
//    int* p, i = 10;
//    p = &i;
//    addOne(p);
//  
//    printf("%d", *p); // 11
//    return 0;
//  }
//
//Here, the value stored at p, *p, is 10 initially.
//
//We then passed the pointer p to the addOne() function. The ptr pointer gets this address in the addOne() function.
//
//Inside the function, we increased the value stored at ptr by 1 using (*ptr)++;. Since ptr and p pointers both have the same address, *p inside main() is also 11.
//
//
//
//
//  let x = 5
//  
//  ++x + ++x = ?
//  output:  14
//
****************************
#include <stdio.h>
int main() {
   int i = 7;
printf("%d\n", i++ * i++);
}

output: 7*8 = 56 

***************************************************************************************************************
#include <stdio.h>
int main() { 
	int a=3,b=4;
	a ^= b ^= a ^= b;
printf("%d\n", a );
printf("%d\n", b );
}
output: 4,3


To understand this trick, break the statements into unique values:

x1 = x xor y
y1 = x1 xor y
x2 = x1 xor y1
According to our code, x2 should have y’s original value. Let’s work out the details for the last step:

x2 = x1 xor y1
x2 = x1 xor (x1 xor y)   // replace y1
x2 = (x1 xor x1) xor y   // regroup parenthesis - order does not matter for XOR
x2 = 0 xor y             // a xor a => 0
x2 = y                   // 0 xor a => a; x2 now has y's original value
Wow – x2 really does equal y! The swap happened. Now let’s try it out for y1:

y1 = x1 xor y
y1 = (x xor y) xor y
y1 = x xor (y xor y)
y1 = x xor 0
y1 = x                  // y1 == x's original value
And tada the trick worked again. x2 and y1 have the swapped answers.


***************************************************************************************************************************

Syntax of malloc()
ptr = (castType*) malloc(size);
Example

ptr = (float*) malloc(100 * sizeof(float));
The above statement allocates 400 bytes of memory. It's because the size of float is 4 bytes. And, the pointer ptr holds the address of the first byte in the allocated memory.

The expression results in a NULL pointer if the memory cannot be allocated.

***************************************************************************************************************************

C calloc()
The name "calloc" stands for contiguous allocation.

The malloc() function allocates memory and leaves the memory uninitialized, whereas the calloc() function allocates memory and initializes all bits to zero.

Syntax of calloc()
ptr = (castType*)calloc(n, size);
Example:

ptr = (float*) calloc(25, sizeof(float));
The above statement allocates contiguous space in memory for 25 elements of type float.
***************************************************************************************************************************

C free()
Dynamically allocated memory created with either calloc() or malloc() doesn't get freed on their own. You must explicitly use free() to release the space.

Syntax of free()
free(ptr);
This statement frees the space allocated in the memory pointed by ptr.


***************************************************************************************************************************



#include <stdio.h>
int main() {
   //Example: char const*
   //Note: char const* is same as const char*
   const char p = 'A';
   // q is a pointer to const char
   char const* q = &p;
   //Invalid asssignment
   // value of p cannot be changed
   // error: assignment of read-only location '*q'
   //*q = 'B';
   const char r = 'C';
   //q can point to another const char
   q = &r;
   printf("%c
", *q);
   //Example: char* const
   char u = 'D';
   char * const t = &u;
   //You can change the value
   *t = 'E';
   printf("%c", *t);
   // Invalid asssignment
   // t cannot be changed
   // error: assignment of read-only variable 't'
   //t = &r;
   //Example: char const* const
   char const* const s = &p;
   // Invalid asssignment
   // value of s cannot be changed
   // error: assignment of read-only location '*s'
   // *s = 'D';
   // Invalid asssignment
   // s cannot be changed
   // error: assignment of read-only variable 's'
   // s = &r;
   return 0;
}


output  : CE



***************************************************************************************************************************


C strlen()
The strlen() function calculates the length of a given string.

The strlen() function takes a string as an argument and returns its length. The returned value is of type size_t (an unsigned integer type).

It is defined in the <string.h> header file.

Example: C strlen() function
#include <stdio.h>
#include <string.h>
int main()
{
    char a[20]="Program";
    char b[20]={'P','r','o','g','r','a','m','\0'};

    // using the %zu format specifier to print size_t
    printf("Length of string a = %zu \n",strlen(a));
    printf("Length of string b = %zu \n",strlen(b));

    return 0;
}
Run Code
Output

Length of string a = 7
Length of string b = 7
Note that the strlen() function doesn't count the null character \0 while calculating the length.


***************************************************************************************************************************




C strcat()
In C programming, the strcat() function contcatenates (joins) two strings.

The function definition of strcat() is:

char *strcat(char *destination, const char *source)
It is defined in the string.h header file.

strcat() arguments
As you can see, the strcat() function takes two arguments:

destination - destination string
source - source string

The strcat() function concatenates the destination string and the source string, and the result is stored in the destination string.

Example: C strcat() function
#include <stdio.h>
#include <string.h>
int main() {
   char str1[100] = "This is ", str2[] = "programiz.com";

   // concatenates str1 and str2
   // the resultant string is stored in str1.
   strcat(str1, str2);

   puts(str1);
   puts(str2);

   return 0;
}
Output

This is programiz.com
programiz.com
Note: When we use strcat(), the size of the destination string should be large enough to store the resultant string. If not, we will get the segmentation fault error.







***************************************************************************************************************************

C strcpy()
In this tutorial, you will learn to use the strcpy() function in C programming to copy strings (with the help of an example).

C strcpy()
The function prototype of strcpy() is:

char* strcpy(char* destination, const char* source);
The strcpy() function copies the string pointed by source (including the null character) to the destination.
The strcpy() function also returns the copied string.
The strcpy() function is defined in the string.h header file.

Example: C strcpy()
#include <stdio.h>
#include <string.h>

int main() {
  char str1[20] = "C programming";
  char str2[20];

  // copying str1 to str2
  strcpy(str2, str1);

  puts(str2); // C programming

  return 0;
}
Run Code
Output

C programming
Note: When you use strcpy(), the size of the destination string should be large enough to store the copied string. Otherwise, it may result in undefined behavior.

***************************************************************************************************************************

